# -*- coding: utf-8 -*-
"""Tugas EDA DSF Day 4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MLM8By1z42MnIeXena0G0rKEFJ62iD7g

# **Create Your Portfolio**

Rincian Tugas:
1. Carilah sebuah dataset (dari kaggle ataupun website lainnya)
2. Lakukan Exploratory Data Analysis pada dataset tersebut.
  - EDA yang dilakukan WAJIB melakukan `Handling Missing Value dan Duplicate`
  - Proses EDA yang lain bersifat opsional (e.g. *handling outlier*)
3. Buat portfolio dalam bentuk Power Point
4. Upload di LinkedIn dan tag dibimbing.id

# **1. Membaca Dataset**
"""

# Mount Gdrive ke Colab
import os
from google.colab import drive

# Create the directory if it doesn't exist
mount_point = '/content/drive'
if not os.path.exists(mount_point):
    os.makedirs(mount_point)

drive.mount(mount_point)

# Mengimport library pandas untuk membaca dataset
import pandas as pd

# baca dataset csv menggunakan syntax pd.read_csv() dari Google Drive
file_path = '/content/drive/My Drive/Data Sample/pizza_sales.csv'
df = pd.read_csv(file_path)

df

"""# 2. **Ringkasan Data**

`info()` : berguna untuk memahami dengan cepat struktur dan konten DataFrame, membantu dalam eksplorasi dan persiapan data.
"""

df.info()

"""# 3. Mengecek Data yang Hilang (Missing Value)"""

# mengecek missing value
df.isna().sum()

"""**Observasi:**

Dari informasi yang kita dapatkan pada data terdapat beberapa data yang hilang pada kolom `pizza_id`, `order_id`, `quantity`, `unit_price`, dan `total_price`
"""

# cek statiscial summary
df.describe()

# cek statiscial summary
df['pizza_name'].describe()

"""**Observasi:**
* Secara keseluruhan, nilai minimum dan maksimum masuk akal untuk setiap kolom
* _Mean ~ 50% (Median)_ di kolom `quantity`, `unit_price`, dan `total_price`, menunjukkan distribusi normal
* Kolom `pizza_id` dan `order_id` bersifat unik dan hanya sebagai identifier, tidak perlu dianalisis lebih lanjut.
* Kolom `pizza_name` memiliki 32 nilai unik, dengan varian "The Classic Deluxe Pizza" paling sering muncul; distribusi ukuran perlu diperiksa lebih lanjut.
"""

# Mengatasi missing value
for column in df.columns:
    if df[column].dtype == 'object':
        # Jika kolom bertipe object, isi dengan mode
        df[column].fillna(df[column].mode()[0], inplace=True)
    else:
        # Jika kolom bertipe numerik, isi dengan mean
        df[column].fillna(df[column].mean(), inplace=True)

# cek kembali missing value
df.isna().sum()

df.info()

"""# 4. Mengatasi Duplikat Data"""

# Mengecek apakah ada duplicate di seluruh kolom
check_duplicate = df.duplicated().sum()

print(f"Jumlah data yang duplikat = {check_duplicate}")

# Handling duplicate
df = df.drop_duplicates()

# Mengecek duplicate setelah di-handle
handle_duplicate = df.duplicated().sum()

print(f"Jumlah data yang duplikat = {handle_duplicate}")

print(handle_duplicate)

"""# **5. Format dan Tipe Data Waktu**"""

# Memastikan order_date dan order_time benar-benar dalam format datetime
df['order_date'] = pd.to_datetime(df['order_date'], format='mixed', dayfirst=True)
df['order_time'] = pd.to_datetime(df['order_time'], format='%H:%M:%S').dt.time

"""# **6. Validasi Data dan Konsistensi Nilai**"""

# Validasi kolom terkait (total_price = quantity Ã— unit_price)
(df['total_price'] != df['quantity'] * df['unit_price']).sum()

"""# **7.  Eksplorasi Data Penjualan Pizza (Exploratory Data Analysis)**

## **A. Distribusi Proporsi 10 Jenis Pizza dengan Frekuensi Terbanyak**
"""

import matplotlib.pyplot as plt
import seaborn as sns

# Menghitung jumlah setiap nama pizza
pizza_name_counts = df['pizza_name'].value_counts()

# Buat diagram lingkaran
top_n = 10  # Nomor dapat disesuaikan
plt.figure(figsize=(10, 10))
plt.pie(pizza_name_counts.head(top_n), labels=pizza_name_counts.head(top_n).index, autopct='%1.1f%%', startangle=140)
plt.title(f'Top {top_n} Pizza Names Distribution (Pie Chart)')
plt.axis('equal') # Rasio aspek yang sama memastikan bahwa pai digambar sebagai lingkaran.
plt.show()

"""## **B. Total Penjualan (Revenue) per Pizza**"""

import matplotlib.pyplot as plt
import seaborn as sns

# Menghitung total pendapatan per nama pizza
revenue_per_pizza = df.groupby('pizza_name')['total_price'].sum().sort_values(ascending=False)

# Menampilkan pendapatan per pizza
print("Total Revenue per Pizza Name:")
print(revenue_per_pizza)

# Membuat plot batang untuk pendapatan per nama pizza
plt.figure(figsize=(12, 8))
sns.barplot(x=revenue_per_pizza.values, y=revenue_per_pizza.index)
plt.title('Total Revenue per Pizza Name')
plt.xlabel('Total Revenue')
plt.ylabel('Pizza Name')
plt.show()

"""## **C. Analisis Rata-Rata Kuantitas Pemesanan Berdasarkan Nama Pizza**"""

import matplotlib.pyplot as plt
import seaborn as sns

# Calculate the average quantity per pizza name
average_quantity_per_pizza = df.groupby('pizza_name')['quantity'].mean().sort_values(ascending=False)

# Display the average quantity per pizza
print("Rata-Rata Jumlah Pesanan per Pizza:")
print(average_quantity_per_pizza)

# Create a bar plot for average quantity per pizza name
plt.figure(figsize=(12, 8))
sns.barplot(x=average_quantity_per_pizza.values, y=average_quantity_per_pizza.index)
plt.title('Rata-Rata Jumlah Pesanan per Pizza')
plt.xlabel('Rata-Rata Jumlah Pesanan')
plt.ylabel('Nama Pizza')
plt.show()

"""## **D. Distribusi Ukuran Pemesanan untuk 10 Nama Pizza dengan Frekuensi Tertinggi**"""

import matplotlib.pyplot as plt
import seaborn as sns

# Calculate the distribution of pizza sizes per pizza name
pizza_size_distribution = df.groupby(['pizza_name', 'pizza_size']).size().unstack(fill_value=0)

# Get the top 10 pizza names based on total count (assuming pizza_name_counts is available from a previous cell)
if 'pizza_name_counts' in locals():
    top_10_pizza_names = pizza_name_counts.head(10).index
else:
    # If pizza_name_counts is not available, calculate it
    top_10_pizza_names = df['pizza_name'].value_counts().head(10).index


# Filter the distribution to include only the top 10 pizza names
top_10_pizza_size_distribution = pizza_size_distribution.loc[top_10_pizza_names]

# Display the filtered distribution
print("Distribusi Ukuran per Top 10 Nama Pizza:")
display(top_10_pizza_size_distribution)

# Create a stacked bar chart for the distribution of pizza sizes per top 10 pizza names
top_10_pizza_size_distribution.plot(kind='bar', stacked=True, figsize=(15, 10))
plt.title('Distribusi Ukuran per Top 10 Nama Pizza')
plt.xlabel('Nama Pizza')
plt.ylabel('Jumlah Pesanan')
plt.xticks(rotation=90)
plt.legend(title='Ukuran Pizza')
plt.tight_layout() # Adjust layout to prevent labels overlapping
plt.show()

"""## **E. Distribusi Kategorikal**"""

# Calculate the count of each pizza category
pizza_category_counts = df['pizza_category'].value_counts()

# Display the most popular pizza categories
print("Kategori Pizza Terpopuler:")
print(pizza_category_counts)

# Create a pie chart for visualization
import matplotlib.pyplot as plt

plt.figure(figsize=(8, 8))
plt.pie(pizza_category_counts, labels=pizza_category_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Distribusi Kategori Pizza')
plt.axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

"""## **F. Harga Rata-Rata per Pizza**"""

# Calculate the average price per pizza name
average_price_per_pizza = df.groupby('pizza_name')['total_price'].mean().sort_values(ascending=False)

# Display the average price per pizza
print("Harga Rata-rata per Pizza:")
print(average_price_per_pizza)

# Optional: Create a bar plot for visualization
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12, 8))
sns.barplot(x=average_price_per_pizza.values, y=average_price_per_pizza.index)
plt.title('Harga Rata-rata per Pizza')
plt.xlabel('Harga Rata-rata')
plt.ylabel('Nama Pizza')
plt.show()

"""## **G. Total Revenue per Hari**"""

import matplotlib.pyplot as plt
import seaborn as sns

# Calculate total revenue per day
daily_revenue = df.groupby('order_date')['total_price'].sum()

# Display the total revenue per day
print("Total Pendapatan per Hari:")
print(daily_revenue)

# Create a line plot for total revenue per day
plt.figure(figsize=(12, 6))
daily_revenue.plot()
plt.title('Total Pendapatan per Hari')
plt.xlabel('Tanggal')
plt.ylabel('Total Pendapatan')
plt.grid(True)
plt.show()

"""## **H. Correlation**"""

# Calculate the correlation matrix for the specified columns
correlation_matrix = df[['quantity', 'unit_price', 'total_price']].corr()

# Display the correlation matrix
print("Matriks Korelasi:")
display(correlation_matrix)

import seaborn as sns
import matplotlib.pyplot as plt

# Create a heatmap of the correlation matrix
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Heatmap Korelasi Antar Variabel')
plt.show()

"""# **8. Feature Engineering**"""

# Waktu
df['order_date'] = pd.to_datetime(df['order_date'])
df['day_of_week'] = df['order_date'].dt.dayofweek  # Senin = 0
df['month'] = df['order_date'].dt.month
df['day'] = df['order_date'].dt.day

# Label Encoding (ukuran atau kategori)
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['pizza_size_encoded'] = le.fit_transform(df['pizza_size'])

# Agregasi Harian untuk Prediksi
daily = df.groupby('order_date')['total_price'].sum().reset_index()
daily['day_of_week'] = daily['order_date'].dt.dayofweek
daily['month'] = daily['order_date'].dt.month
daily['day'] = daily['order_date'].dt.day

# Volume penjualan harian
daily['total_quantity'] = df.groupby('order_date')['quantity'].sum().values

# Rata-rata unit_price per hari
daily['avg_unit_price'] = df.groupby('order_date')['unit_price'].mean().values

# Total item unik dipesan
daily['unique_pizzas'] = df.groupby('order_date')['pizza_name'].nunique().values

# Ukuran pizza (dalam bentuk numerik rata-rata)
size_mapping = {'S': 1, 'M': 2, 'L': 3, 'XL': 4, 'XXL': 5}
df['pizza_size_num'] = df['pizza_size'].map(size_mapping)
daily['avg_size'] = df.groupby('order_date')['pizza_size_num'].mean().values

"""# **9. Modelling (Regresi)**

## **A. Separating**
"""

# Memisahkan Fitur dan Target
X = daily[['day_of_week', 'month', 'day', 'total_quantity', 'avg_unit_price', 'unique_pizzas', 'avg_size']]
y = daily['total_price']

"""## **B. Splitting Data**"""

# Splitting Data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""## **C. Tuning Hyperparameter**"""

from sklearn.model_selection import RandomizedSearchCV
from sklearn.ensemble import RandomForestRegressor

# Define the parameter grid for hyperparameter tuning
param_grid = {
    'n_estimators': [100, 200, 300, 400, 500],
    'max_features': ['auto', 'sqrt', 'log2'],
    'max_depth': [10, 20, 30, 40, 50, None],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4],
    'bootstrap': [True, False]
}

# Create a RandomizedSearchCV object
rf = RandomForestRegressor(random_state=42)
random_search = RandomizedSearchCV(estimator=rf, param_distributions=param_grid, n_iter=100, cv=5, verbose=2, random_state=42, n_jobs=-1)

# Fit the random search model
random_search.fit(X_train, y_train)

# Print the best parameters and best score
print("Best parameters found: ", random_search.best_params_)
print("Best R2 score found: ", random_search.best_score_)

# Evaluate the best model on the test set
best_model = random_search.best_estimator_
y_pred_tuned = best_model.predict(X_test)

from sklearn.metrics import mean_squared_error, r2_score
print(f"MSE (Tuned Model): {mean_squared_error(y_test, y_pred_tuned):.2f}")
print(f"R2 Score (Tuned Model): {r2_score(y_test, y_pred_tuned):.2f}")

"""## **Model Random Forest**"""

# Membuat Model Random Forest
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Inisialisasi model Random Forest
rf_model = RandomForestRegressor(random_state=42)

# Latih model menggunakan data pelatihan
rf_model.fit(X_train, y_train)

# Lakukan prediksi pada data uji
y_pred_rf = rf_model.predict(X_test)

# Evaluasi model
print("Evaluasi Model Random Forest:")
print(f"Mean Squared Error (MSE): {mean_squared_error(y_test, y_pred_rf):.2f}")
print(f"R2 Score: {r2_score(y_test, y_pred_rf):.2f}")

# Visualisasi hasil prediksi vs aktual
plt.figure(figsize=(10, 6))
plt.plot(y_test.values, label='Aktual')
plt.plot(y_pred_rf, label='Prediksi Random Forest')
plt.title('Prediksi Penjualan Harian (Random Forest)')
plt.xlabel('Indeks Sampel Uji')
plt.ylabel('Total Harga')
plt.legend()
plt.show()

"""# **10. Save Data**"""

import joblib

# Simpan model ke file
joblib.dump(rf_model, 'random_forest_model.joblib')

print("Model Random Forest berhasil disimpan sebagai 'random_forest_model.joblib'")